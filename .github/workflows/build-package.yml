name: Build Package
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-11']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.0
        env:
          CIBW_BEFORE_BUILD_LINUX: yum install -y wget && ./build-drafter.sh linux
          CIBW_BEFORE_BUILD_MACOS: ./build-drafter.sh mac
          CIBW_BUILD: "cp38-manylinux_x86_64 cp38-macosx_arm64"
          CIBW_ARCHS_MACOS: arm64
          CIBW_BUILD_VERBOSITY: 3
        with:
          package-dir: .
          output-dir: dist
          config-file: "pyproject.toml"

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - run: pip install --upgrade pip

      # There are two things happening here
      #
      # 1. Poetry automatically assumes the most specific tag
      # but we don't actually need specific builds
      # for each python version (3.8, 3.9, etc).
      # We build one wheel then re-tag it as py3-none.
      #
      # 2. Cross-compiling wheels for arm and poetry based projects
      # creates wheels with the wrong platform tag. They are tagged
      # with the source platform, not the target, so the wheel
      # manifest + filename will be x86_64 instead of arm64.
      # We re-tag it as arm64 to fix this.
      - name: Fix wheel tags (linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          pip install wheel>=0.40.0
          wheel tags --python-tag py3 --abi-tag none dist/*linux*.whl --remove
      - name: Fix wheel tags (mac)
        if: startsWith(matrix.os, 'macos')
        run: |
          pip install wheel>=0.40.0
          wheel tags --python-tag py3 --abi-tag none --platform-tag macosx_arm64 dist/*-macosx*.whl --remove

      # build sdist, only on linux
      - name: Install dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run:
          pip install poetry
          make install
      - name: Build sdist
        if: startsWith(matrix.os, 'ubuntu')
        run: poetry build --format sdist

      - run: ls dist
      - uses: actions/upload-artifact@v3
        with:
          path: ./dist/*

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: none
      id-token: write # required for trusted publishing
    environment: publish
    steps:
      - uses: actions/download-artifact@v3

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: artifact/
          print-hash: true
